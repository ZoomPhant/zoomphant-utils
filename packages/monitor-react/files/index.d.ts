// Generated by dts-bundle-generator v9.5.1

import React$1 from 'react';

// Generated by dts-bundle-generator v9.5.1
export type ISettings = IBaseSettings & {
	plugins?: IPluginSettings;
} & IStackSettings;
export type IBaseSettings = {
	account: string;
	agent: string;
	token: string;
	instanceId: string;
	domain: string;
};
export type IPluginSettings = {
	xhr?: boolean;
	fetch?: boolean;
	console?: boolean;
};
export type IStackSettings = {
	maxStacks?: number;
};
export type IMessageParams = {
	level: "info" | "warn" | "error";
	type: "xhr" | "console" | "fetch" | "exception";
	message: string;
	timestamp: number;
	extra: {
		url?: string;
		os?: string;
		browser?: string;
		browserVersion?: string;
		title?: string;
		data?: string;
	};
};
declare class Message {
	type: IMessageParams["type"] | null;
	level: IMessageParams["level"] | null;
	message: IMessageParams["message"] | null;
	timestamp: IMessageParams["timestamp"] | null;
	extra: IMessageParams["extra"] | null;
	constructor(type: IMessageParams["type"], level: IMessageParams["level"], message: IMessageParams["message"], extra: IMessageParams["extra"]);
	generateExtra(): void;
	destroy(): void;
}
declare class Logs {
	private core;
	private maxStacks;
	private stacks;
	constructor(core: Core, maxStacks: number);
	capture(message: Message | [
		IMessageParams["type"],
		IMessageParams["level"],
		IMessageParams["message"]
	] | [
		IMessageParams["type"],
		IMessageParams["level"],
		IMessageParams["message"],
		IMessageParams["extra"]
	]): void;
	captureAndSync(message: Message | [
		IMessageParams["type"],
		IMessageParams["level"],
		IMessageParams["message"]
	] | [
		IMessageParams["type"],
		IMessageParams["level"],
		IMessageParams["message"],
		IMessageParams["extra"]
	]): Promise<{
		error?: string | undefined;
	}> | Promise<void>;
}
declare class Core {
	static readonly version: string;
	private connectorId;
	private monitorId;
	baseSettings: IBaseSettings | null;
	private pluginSettings;
	private connector;
	private messageResolvers;
	logs: Logs;
	constructor(settings: ISettings);
	private initialize;
	private createConnector;
	private addEventListeners;
	private handleMessage;
	post<T = {
		error?: string;
	}>({ type, body, }: {
		type: "logs" | "metrics";
		body: string;
	}): Promise<T>;
	destroy(): void;
}
export declare const MonitorProvider: React$1.FC<React$1.PropsWithChildren<{
	monitor: Core;
}>>;
export declare const useMonitor: () => Core;
export declare const getMonitor: () => Core;

export {
	Core as default,
};

export {};
